#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class hits_item:
  """
  Attributes:
   - entrezgene
   - name
   - _score
   - symbol
   - _id
   - taxid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'entrezgene', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, '_score', None, None, ), # 3
    (4, TType.STRING, 'symbol', None, None, ), # 4
    (5, TType.STRING, '_id', None, None, ), # 5
    (6, TType.I32, 'taxid', None, None, ), # 6
  )

  def __init__(self, entrezgene=None, name=None, _score=None, symbol=None, _id=None, taxid=None,):
    self.entrezgene = entrezgene
    self.name = name
    self._score = _score
    self.symbol = symbol
    self._id = _id
    self.taxid = taxid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.entrezgene = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self._score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.symbol = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self._id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.taxid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('hits_item')
    if self.entrezgene is not None:
      oprot.writeFieldBegin('entrezgene', TType.I32, 1)
      oprot.writeI32(self.entrezgene)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self._score is not None:
      oprot.writeFieldBegin('_score', TType.DOUBLE, 3)
      oprot.writeDouble(self._score)
      oprot.writeFieldEnd()
    if self.symbol is not None:
      oprot.writeFieldBegin('symbol', TType.STRING, 4)
      oprot.writeString(self.symbol)
      oprot.writeFieldEnd()
    if self._id is not None:
      oprot.writeFieldBegin('_id', TType.STRING, 5)
      oprot.writeString(self._id)
      oprot.writeFieldEnd()
    if self.taxid is not None:
      oprot.writeFieldBegin('taxid', TType.I32, 6)
      oprot.writeI32(self.taxid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class cdk2:
  """
  Attributes:
   - hits
   - max_score
   - took
   - total
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hits', (TType.STRUCT,(hits_item, hits_item.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'max_score', (TType.STRING,None,TType.DOUBLE,None), None, ), # 2
    (3, TType.MAP, 'took', (TType.STRING,None,TType.I32,None), None, ), # 3
    (4, TType.MAP, 'total', (TType.STRING,None,TType.I32,None), None, ), # 4
  )

  def __init__(self, hits=None, max_score=None, took=None, total=None,):
    self.hits = hits
    self.max_score = max_score
    self.took = took
    self.total = total

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hits = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = hits_item()
            _elem5.read(iprot)
            self.hits.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.max_score = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readString();
            _val12 = iprot.readDouble();
            self.max_score[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.took = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in xrange(_size13):
            _key18 = iprot.readString();
            _val19 = iprot.readI32();
            self.took[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.total = {}
          (_ktype21, _vtype22, _size20 ) = iprot.readMapBegin()
          for _i24 in xrange(_size20):
            _key25 = iprot.readString();
            _val26 = iprot.readI32();
            self.total[_key25] = _val26
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cdk2')
    if self.hits is not None:
      oprot.writeFieldBegin('hits', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.hits))
      for iter27 in self.hits:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_score is not None:
      oprot.writeFieldBegin('max_score', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.max_score))
      for kiter28,viter29 in self.max_score.items():
        oprot.writeString(kiter28)
        oprot.writeDouble(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.took is not None:
      oprot.writeFieldBegin('took', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.took))
      for kiter30,viter31 in self.took.items():
        oprot.writeString(kiter30)
        oprot.writeI32(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.total))
      for kiter32,viter33 in self.total.items():
        oprot.writeString(kiter32)
        oprot.writeI32(viter33)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
